// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MilestoneProject.Data;

namespace FinalProject.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("FinalProject.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MilestoneProject.Models.Belt", b =>
                {
                    b.Property<int>("beltId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("fighterId");

                    b.Property<string>("type")
                        .IsRequired();

                    b.Property<int>("weightCategoryId");

                    b.HasKey("beltId");

                    b.HasIndex("fighterId")
                        .IsUnique();

                    b.HasIndex("weightCategoryId");

                    b.ToTable("Belts");
                });

            modelBuilder.Entity("MilestoneProject.Models.Fight", b =>
                {
                    b.Property<int>("FightId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("tournamentId");

                    b.Property<int>("weightCategoryId");

                    b.HasKey("FightId");

                    b.HasIndex("tournamentId");

                    b.HasIndex("weightCategoryId");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("MilestoneProject.Models.Fighter", b =>
                {
                    b.Property<int>("FighterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("draws");

                    b.Property<int>("losts");

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<int>("weightCategoryId");

                    b.Property<int>("wins");

                    b.HasKey("FighterId");

                    b.HasIndex("weightCategoryId");

                    b.ToTable("Fighters");
                });

            modelBuilder.Entity("MilestoneProject.Models.FightsAndFighters", b =>
                {
                    b.Property<int>("fightsAndFightersId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("fightId");

                    b.Property<int>("fighterId");

                    b.HasKey("fightsAndFightersId");

                    b.HasIndex("fightId");

                    b.HasIndex("fighterId");

                    b.ToTable("Fights_And_Fighters");
                });

            modelBuilder.Entity("MilestoneProject.Models.Tournament", b =>
                {
                    b.Property<int>("tournamentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired();

                    b.HasKey("tournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("MilestoneProject.Models.WeightCategory", b =>
                {
                    b.Property<int>("WeightCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.HasKey("WeightCategoryId");

                    b.ToTable("WeightCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalProject.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalProject.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinalProject.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalProject.Models.Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MilestoneProject.Models.Belt", b =>
                {
                    b.HasOne("MilestoneProject.Models.Fighter", "owner")
                        .WithOne("belt")
                        .HasForeignKey("MilestoneProject.Models.Belt", "fighterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MilestoneProject.Models.WeightCategory", "weightCategory")
                        .WithMany("belts")
                        .HasForeignKey("weightCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MilestoneProject.Models.Fight", b =>
                {
                    b.HasOne("MilestoneProject.Models.Tournament", "tournament")
                        .WithMany("fights")
                        .HasForeignKey("tournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MilestoneProject.Models.WeightCategory", "weightCategory")
                        .WithMany("fights")
                        .HasForeignKey("weightCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MilestoneProject.Models.Fighter", b =>
                {
                    b.HasOne("MilestoneProject.Models.WeightCategory", "weightCategory")
                        .WithMany("fighters")
                        .HasForeignKey("weightCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MilestoneProject.Models.FightsAndFighters", b =>
                {
                    b.HasOne("MilestoneProject.Models.Fight", "fight")
                        .WithMany("fightsAndFighters")
                        .HasForeignKey("fightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MilestoneProject.Models.Fighter", "fighter")
                        .WithMany("fightsAndFighters")
                        .HasForeignKey("fighterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
